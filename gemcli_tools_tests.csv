id,user_prompt,expected_tool,expected_args_contains,assertions,notes
T01,"List all Python files under backend/app/api",list_files,"dir=backend/app/api; exts=['.py']",result.count>=3 AND result.files contains 'backend/app/api/rag.py' AND 'backend/app/api/chat.py' AND 'backend/app/api/pdf.py',"These files exist and are API routers in your repo (see code)."
T02,"Read backend/app/api/chat.py (first 2KB)",read_file,"path=backend/app/api/chat.py; max_bytes=2000","'APIRouter' in result.content", "chat.py declares a FastAPI router. :contentReference[oaicite:0]{index=0}"
T03,"Search for 'APIRouter' in API modules",search_code,"query='APIRouter'; exts=['.py']",">=3 matches and includes paths for rag.py, chat.py, pdf.py","All three files declare routers. :contentReference[oaicite:1]{index=1} :contentReference[oaicite:2]{index=2} :contentReference[oaicite:3]{index=3}"
T04,"Scan for files relevant to 'export PDF via Puppeteer'",scan_relevant_files,"prompt='export PDF Puppeteer'; dir=backend/app/api; exts=['.py']","top-1 match.path endswith 'backend/app/api/pdf.py'", "pdf.py explicitly calls a Node.js Puppeteer script and exports PDFs. :contentReference[oaicite:4]{index=4}"
T05,"Analyze these files for quick signals",analyze_files,"paths=['backend/app/api/rag.py','backend/app/api/chat.py','backend/app/api/pdf.py']","For each path: lines>0; preview_head not empty; pdf.py.has_open_calls == True","pdf.py uses file I/O (NamedTemporaryFile and with open). :contentReference[oaicite:5]{index=5}"
T06,"Rewrite naive open() patterns to 'with open(...)' (dry run)",rewrite_naive_open,"dir=backend/app/api; exts=['.py']; dry_run=true","All rewrites.changed are False OR diffs show only safe context-manager conversions","Your pdf.py already uses context managers; this should be a no-op or minimal. :contentReference[oaicite:6]{index=6}"
T07,"Create a temp helper file under backend/app/api/tmp/hello.txt",write_file,"path=backend/app/api/tmp/hello.txt; content='hello world'; overwrite=false; backup=true","result.bytes_written==len('hello world') AND path exists","Sets up the next replace/bulk tests (idempotent if folder exists)."
T08,"Replace 'hello' with 'hi' in backend/app/api/tmp/hello.txt (dry run)",replace_in_file,"path=backend/app/api/tmp/hello.txt; find='hello'; replace='hi'; dry_run=true; backup=true","result.replacements>=1 AND '---' in result.diff","Shows the unified diff without writing; verifies diff generation."
T09,"Apply the previous replacement (write)",replace_in_file,"path=backend/app/api/tmp/hello.txt; find='hello'; replace='hi'; dry_run=false; backup=true","result.replacements>=1 AND file now contains 'hi world'","Writes the change; backup .bak is created."
T10,"Bulk edit: change 'JSONResponse' to 'JSONResponse' (no-op) and 'logger' spelling check (no-op) across API dir (dry run)",bulk_edit,"edits=[{'path':'backend/app/api/chat.py','find':'JSONResponse','replace':'JSONResponse'},{'path':'backend/app/api/rag.py','find':'logger','replace':'logger'}]; dry_run=true; backup=true","result.total_replacements>=0 AND all entries have a 'diff' string","Exercises bulk API safely; both files contain those tokens. :contentReference[oaicite:7]{index=7} :contentReference[oaicite:8]{index=8}"
T11,"Format Python files under backend/app/api (preview)",format_python_files,"dir=backend/app/api; exts=['.py']; line_length=88; preview=true","No error string; each result has changed True/False; if changed==True then diff present","Requires Black installed; preview avoids writing."
T12,"Find manual indexing endpoints",search_code,"query='manual_index'; exts=['.py']","matches include 'manual_index_all' and 'manual_index_changes_only' in rag.py","RAG routes expose these handlers. :contentReference[oaicite:9]{index=9}"
T13,"Read backend/app/api/rag.py (first 2KB)",read_file,"path=backend/app/api/rag.py; max_bytes=2000","'manual_full_reindex' in result.content OR 'manual_delta_index' in result.content","Confirms RAG indexing surface. :contentReference[oaicite:10]{index=10}"
T14,"Read backend/app/api/pdf.py (first 2KB)",read_file,"path=backend/app/api/pdf.py; max_bytes=2000","'export_pdf' in result.content AND 'Puppeteer' in result.content","Confirms the PDF export flow. :contentReference[oaicite:11]{index=11}"
T15,"Scan for currency utility usage in chat API",scan_relevant_files,"prompt='get USD INR exchange rate utility'; dir=backend/app/api; exts=['.py']","top matches include backend/app/api/chat.py","chat.py imports get_usd_inr_rate (usage proximity). :contentReference[oaicite:12]{index=12}"
T16,"Analyze chat router structure",analyze_files,"paths=['backend/app/api/chat.py']","preview_head contains '@router.post(\"/\")' AND '@router.post(\"/stream\")'","Verifies both standard and streaming chat endpoints. :contentReference[oaicite:13]{index=13}"

